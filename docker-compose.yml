# Docker Compose configuration for Nginx Site Manager
# Provides complete containerized deployment with volumes and networking

version: '3.8'

services:
  nginx-manager:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    container_name: nginx-manager
    hostname: nginx-manager
    restart: unless-stopped
    
    # Port mappings
    ports:
      - "${HTTP_PORT:-80}:80"           # HTTP
      - "${HTTPS_PORT:-443}:443"        # HTTPS  
      - "${MANAGER_PORT:-8080}:8080"    # Management interface
    
    # Environment variables
    environment:
      # Application settings
      - NGINX_MANAGER_HOST=${NGINX_MANAGER_HOST:-0.0.0.0}
      - NGINX_MANAGER_PORT=${NGINX_MANAGER_PORT:-8080}
      - NGINX_MANAGER_DEBUG=${NGINX_MANAGER_DEBUG:-false}
      - NGINX_MANAGER_SECRET_KEY=${NGINX_MANAGER_SECRET_KEY:-}
      
      # Admin credentials
      - NGINX_MANAGER_ADMIN_USERNAME=${NGINX_MANAGER_ADMIN_USERNAME:-admin}
      - NGINX_MANAGER_ADMIN_PASSWORD=${NGINX_MANAGER_ADMIN_PASSWORD:-}
      - NGINX_MANAGER_ADMIN_EMAIL=${NGINX_MANAGER_ADMIN_EMAIL:-admin@localhost}
      
      # SSL settings
      - NGINX_MANAGER_SSL_EMAIL=${NGINX_MANAGER_SSL_EMAIL:-ssl@localhost}
      - NGINX_MANAGER_SSL_STAGING=${NGINX_MANAGER_SSL_STAGING:-false}
      
      # Container settings
      - TZ=${TZ:-UTC}
      - APP_ENV=production
    
    # Volumes for persistent data
    volumes:
      # Application data (database, backups, configs)
      - nginx_manager_data:/app/data
      
      # Website files
      - nginx_manager_web:/var/www
      
      # SSL certificates (Let's Encrypt)
      - nginx_manager_ssl:/home/nginx-manager/.letsencrypt
      
      # Nginx site configurations (optional - for external management)
      - nginx_manager_sites:/etc/nginx/sites-available
      
      # Logs (optional - for external log management)
      - nginx_manager_logs:/var/log/nginx-manager
      
      # Custom configuration (optional)
      # - ./config.yaml:/app/config.yaml:ro
    
    # Health check
    healthcheck:
      test: ["/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false  # Needs write access for nginx configs and SSL
    
    # Capabilities (minimal required)
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
      - NET_BIND_SERVICE  # For binding to ports 80/443
    cap_drop:
      - ALL
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Labels for better container management
    labels:
      - "traefik.enable=false"  # Disable Traefik by default
      - "com.nginx-manager.service=main"
      - "com.nginx-manager.version=${VERSION:-1.0.0}"

# Named volumes for data persistence
volumes:
  nginx_manager_data:
    driver: local
    labels:
      - "com.nginx-manager.volume=data"
      - "com.nginx-manager.description=Application data and database"
  
  nginx_manager_web:
    driver: local
    labels:
      - "com.nginx-manager.volume=web"
      - "com.nginx-manager.description=Website files and content"
  
  nginx_manager_ssl:
    driver: local
    labels:
      - "com.nginx-manager.volume=ssl"
      - "com.nginx-manager.description=SSL certificates and keys"
  
  nginx_manager_sites:
    driver: local
    labels:
      - "com.nginx-manager.volume=sites"
      - "com.nginx-manager.description=Nginx site configurations"
  
  nginx_manager_logs:
    driver: local
    labels:
      - "com.nginx-manager.volume=logs"
      - "com.nginx-manager.description=Application and system logs"

# Optional: External network for reverse proxy integration
# networks:
#   default:
#     name: nginx-manager-network
#     driver: bridge
#   reverse-proxy:
#     external: true